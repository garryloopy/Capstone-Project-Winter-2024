  // const newOrders = ordersList.map((order) => {
  //   if (order.orderId === orderId) {
  //     const newOrder = {
  //       ...order,
  //       orderStatus: newStatus,
  //     };

  //     return newOrder;
  //   } else {
  //     return order;
  //   }
  // });

  // GET ORDER LIST
  // async function getOrdersList() {
  //   try {
  //     const res = await fetch("/api/getOrderList", {
  //       method: "GET",
  //       headers: {
  //         "Content-Type": "application/json",
  //         "Cache-Control": "no-cache",
  //       },
  //     });

  //     if (res.ok) {
  //       const data = await res.json();

  //       setOrdersList(data);
  //     } else {
  //       console.log("Failed to fetch menu list");
  //     }
  //   } catch (error) {
  //     console.error("An error occurred while fetching the order list:", error);
  //   }
  // }
  // getOrdersList();
  // ** End of GET ORDER LIST

  // setOrdersList(newOrders);



  // const generateLabels = () => {
  //   const labels = [];
  //   const startDate = selectedRange.startDate;
  //   const endDate = selectedRange.endDate;
  //   const monthNames = [
  //     "Jan",
  //     "Feb",
  //     "Mar",
  //     "Apr",
  //     "May",
  //     "Jun",
  //     "Jul",
  //     "Aug",
  //     "Sep",
  //     "Oct",
  //     "Nov",
  //     "Dec",
  //   ];

  //   let currentDate = new Date(startDate);

  //   while (currentDate <= endDate) {
  //     const formattedDate = `${
  //       monthNames[currentDate.getMonth()]
  //     }-${currentDate.getDate()}`;
  //     labels.push(formattedDate);
  //     currentDate.setDate(currentDate.getDate() + 1);
  //   }
  //   return labels;
  // };


// components for bar chart
// Chart.register(
//   CategoryScale,
//   LinearScale,
//   PointElement,
//   BarElement,
//   Title,
//   Tooltip
// );



  // const [selectedRange, setSelectedRange] = useState({
  //   startDate: new Date(),
  //   endDate: new Date(),
  // });

  // const handleDateRangeChange = (range) => {
  //   setSelectedRange(range);
  // };

  // const options = {
  //   scales: {
  //     y: {
  //       beginAtZero: true,
  //       ticks: { stepSize: 1 },
  //     },
  //   },
  //   plugins: {
  //     title: {
  //       display: true,
  //       text: "Daily Order Chart",
  //       font: {
  //         size: 20,
  //       },
  //     },
  //   },
  // };

  // const [graphData, setGraphData] = useState({
  //   labels: [],
  //   datasets: [
  //     {
  //       label: null,
  //       data: [],
  //       borderColor: "Orange",
  //       tension: 0.1,
  //     },
  //   ],
  // });

  // useEffect(() => {
  //   fetchOrderData(selectedRange.startDate, selectedRange.endDate);
  // }, [selectedRange]);

  // const fetchOrderData = async (startDate, endDate) => {
  //   try {
  //     const res = await fetch(
  //       `/api/getOrderList?startDate=${startDate}&endDate=${endDate}`
  //     );
  //     if (res.ok) {
  //       const orders = await res.json();
  //       const orderCounts = {};

  //       orders.forEach((order) => {
  //         const formattedDate = new Intl.DateTimeFormat("en-US", {
  //           month: "short",
  //           day: "2-digit",
  //         }).format(new Date(order.createdAt));

  //         orderCounts[formattedDate] = (orderCounts[formattedDate] || 0) + 1;
  //       });

  //       const labels = Object.keys(orderCounts);
  //       const data = labels.map((label) => orderCounts[label]);

  //       const graphData = {
  //         labels: labels,
  //         datasets: [
  //           {
  //             label: "Order(s)",
  //             data: data,
  //             borderColor: "Orange",
  //             tension: 0.1,
  //           },
  //         ],
  //       };
  //       setGraphData(graphData);
  //     } else {
  //       console.log("Error fetching order data");
  //     }
  //   } catch (error) {
  //     console.error("An error occurred while fetching order data:", error);
  //   }
  // };



DateRange feature
import React, { useState } from "react";
import { DateRangePicker } from "react-date-range";
import "react-date-range/dist/styles.css";
import "react-date-range/dist/theme/default.css";

const DateRange = ({ onDateRangeChange }) => {
  const [selectedRange, setSelectedRange] = useState([
    {
      startDate: new Date(),
      endDate: new Date(),
      key: "selection",
    },
  ]);

  const handleDateChange = (ranges) => {
    setSelectedRange([ranges.selection]);
    onDateRangeChange({
      startDate: ranges.selection.startDate,
      endDate: ranges.selection.endDate,
    });
  };

  return (
    /* Date Range Picker */
    <div>
      <DateRangePicker ranges={selectedRange} onChange={handleDateChange} />
    </div>
  );
};

export default DateRange;
